#!/bin/bash
#
# Copyright 2016-2017 the Bayou Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>
#
# Builds and runs the product, cleaning first if asked. This runs the product
# in dev mode, which means that changed source files trigger appropriate
# actions. Specifically:
#
# * If a client source file changes, the system will automatically rebuild the
#   client code bundle (without restarting the app).
# * If a server source file changes, the system will quit the app, rebuild it,
#   and restart.
#
# See `--help` for additional details.
#

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Directory for the built output.
outDir=''

# Initial clean build?
doClean=0

# Options to pass when building.
buildOpts=()

while true; do
    case $1 in
        -h|--help)
            showHelp=1
            break
            ;;
        --clean)
            doClean=1
            ;;
        --out=?*)
            outDir="${1#*=}"
            ;;
        --overlay=?*)
            buildOpts+=("$1");
            ;;
        --) # End of all options
            shift
            break
            ;;
        -?*)
            echo "Unknown option: $1" 1>&2
            argError=1
            break
            ;;
        *)  # Default case: No more options, break out of the loop.
            break
    esac

    shift
done

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [--clean] [--out=<dir>] [--overlay=<dir>]"
    echo '  Build and run the project, in a live development manner.'
    echo ''
    echo '  --clean'
    echo '    Do an initial clean build.'
    echo '  --out=<dir>'
    echo '    Find (and place) build output in directory <dir>.'
    echo '  --overlay=<dir>'
    echo '    Find overlay source in directory <dir>.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit ${argError}
fi

#
# Main script
#

if [[ ${outDir} == '' ]]; then
    # Default output directory.
    outDir="${baseDir}/out"
fi

buildOpts+=(--out="${outDir}")

while true; do
    cleanArg=()
    if (( ${doClean} )); then
        cleanArg=(--clean)
        doClean=0
    fi

    echo ''

    "${progDir}/build" "${cleanArg[@]}" "${buildOpts[@]}"
    if (( $? != 0 )); then
        echo "Build failure. Waiting a moment before trying again..."
        echo ''
        sleep 15
        continue
    fi

    echo ''

    "${outDir}/final/bin/run" --dev
    status="$?"

    if (( ${status} >= 128 && ${status} <= 191 )); then
        # `130` is the status code if the developer hits `ctrl-C` on the
        # console. `131` is the status code for a `QUIT` signal (`ctrl-\` or
        # via `kill`). We don't really need to note those.
        if (( ${status} != 130 && ${status} != 131 )); then
            echo "Application halted via signal: $((status - 128))"
        fi
        break # out of the loop.
    elif (( ${status} != 0 )); then
        # Not a clean exit, probably due to the application failing to catch an
        # exception. This is most commonly a transient error during development.
        #
        # We wait a few seconds, both so that lingering console logs can make it
        # out, and to give a little breathing room during development (instead
        # of pegging the CPU in case of repeated failure). Then, we iterate and
        # run again.

        echo "Application halted with status: ${status}"
        echo 'Probably an uncaught exception.' \
            'Waiting a moment before trying again...'
        echo ''

        sleep 15
    fi
done
