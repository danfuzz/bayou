#!/bin/bash
#
# Copyright 2016-2018 the Bayou Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>
#
# Loops over all of the npm modules in a given directory
# and executes the indicated lifecycle scripts associated
# with them.
#

# Set `progName` to the program name.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
}
init-prog

#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Directory in which to look for modules
modulePath=''

# Modules to update
modules=()

# Lifecycle event to fire
lifecycleEvent=''

while true; do
    case $1 in
        -h|--help)
            showHelp=1
            break
            ;;
        --event=?*)
            lifecycleEvent=${1#*=}

            if [[ ! "${lifecycleEvent}" =~ ^(clean|preinstall|build|install|postinstall|uninstall)$ ]]; then
                echo "Unknown event: ${lifecycleEvent}" 1>&2
                echo 1>&2

                argError=1
                break
            fi
            ;;
        --event=|--event)
            echo '--event requires a non-empty argument.'
            argError=1
            break
            ;;
        --module=?*)
            modules+=(${1#*=})
            ;;
        --module=|--module)
            echo '--module requires a non-empty argument.'
            argError=1;
            break
            ;;
        --path=?*)
            modulePath=${1#*=}
            ;;
        --path=|--path)
            echo '--path requires a non-empty argument.'
            argError=1
            break
            ;;
        --) # End of all options
            shift
            break
            ;;
        -?*)
            echo "Unknown option: $1" 1>&2
            argError=1
            ;;
        *)  # Default case: No more options, break out of the loop.
            break;
    esac

    shift
done

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} --path=<path> --event=<event> [--module=<name> ...]"
    echo '  Run the event for the modules in the given path.'
    echo ''
    echo '  --path=</path/to/modules/dir>'
    echo '    The directory path in which to look for modules.'
    echo '  --module=<name>'
    echo '    If supplied then events will fire for the named module.'
    echo '    If not specified then the event will fire for all modules in'
    echo '    the directory specified by --path.'
    echo '    --module can be specified more than once.'
    echo '  --event=<event>'
    echo '    The module lifecycle event to trigger. Must be one of'
    echo '      [ clean | preinstall | build | install | postinstall | uninstall ]'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit ${argError}
fi

#
# Main Script
#

# Iterates over the modules at a given path and executes
# the named lifecycle script if one is found.
# Ensure the modules directory exists.
if [[ ! -d "${modulePath}" ]]; then
    echo "Path ${modulePath} does not exist." 1>&2
    exit 1
fi

(
    cd "${modulePath}"

    if (( ${#modules[@]} == 0 )); then
        modules=$(find . -type d -mindepth 1 -maxdepth 1)
    fi

    # For each subdirectory at the supplied path...
    for module in ${modules[@]}; do
        packagePath="${module}/package.json"

        # See if it has a package.json file, skip directory if it doesn't.
        if [[ ! -r "${packagePath}" ]]; then
            continue
        fi

        script=''

        # See if package.json defines a script for the given event...
        script="$(jq -e -r ".scripts.${lifecycleEvent}" "${packagePath}")"

        # Skip it if it doesn't.
        if (( $? > 0 )); then
            continue
        fi

        # Finally, execute the lifecycle script.
        (cd "${module}"; sh -c "${script}") || exit 1
    done
)
