#!/bin/bash
#
# Copyright 2016-2018 the Bayou Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>
#
# Set up the build output directory for a build, including cleaning it and
# creating it. Prints out the absolute path of the directory on `stdout` upon
# success, except if `--just-clean` was specified in which case nothing is
# printed. If there is trouble, prints an error to `stderr` and prints nothing
# to `stdout`.
#

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Move `baseDir` up one layer (not done above because the above is boilerplate).
baseDir="$(cd "${baseDir}/.."; /bin/pwd -P)"


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Clean build?
clean=0

# Just clean? (Don't create directory.)
justClean=0

# Print out directory name?
printDir=1

# Directory for the built output.
outDir=''

while true; do
    case $1 in
        -h|--help)
            showHelp=1
            break
            ;;
        --clean)
            clean=1
            ;;
        --just-clean)
            clean=1
            justClean=1
            ;;
        --no-print)
            printDir=0
            ;;
        --out=?*)
            outDir="${1#*=}"
            ;;
        --) # End of all options
            shift
            break
            ;;
        -?*)
            echo "Unknown option: $1" 1>&2
            argError=1
            break
            ;;
        *)  # Default case: No more options, break out of the loop.
            break
    esac

    shift
done

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Sets up and/or cleans the built output directory. Prints the'
    echo '  absolute path of the output directory. This uses a default output'
    echo '  directory relative to the project base if `--out=` is not'
    echo '  specified.'
    echo ''
    echo '  --clean'
    echo '    Start from a clean build.'
    echo '  --just-clean'
    echo '    Just clean (and do not recreate the output directory).'
    echo '  --no-print'
    echo '    Do not print out the directory name.'
    echo '  --out=<dir>'
    echo '    Place output in directory <dir>.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit ${argError}
fi


#
# Main script
#

if [[ ${outDir} == '' ]]; then
    # Default output directory.
    outDir="${baseDir}/out"
fi

if [[ -e ${outDir} ]]; then
    if [[ ! -d ${outDir} ]]; then
        echo "Not a directory: ${outDir}" 1>&2
        exit 1
    elif (( ${clean} )); then
        # Note: Order of this test wrt the last one is intentional: We don't
        # want to blow away a non-directory.
        rm -rf "${outDir}" || exit 1
    fi
fi

if (( !${justClean} )); then
    mkdir -p "${outDir}" || exit 1
fi

if (( ${printDir} )); then
    # Print it out as an absolute path.
    cd ${outDir}
    /bin/pwd -P
fi
