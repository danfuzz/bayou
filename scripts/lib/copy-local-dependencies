#!/bin/bash
#
# Copyright 2016-2018 the Bayou Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>
#
# Installs local module dependencies in a package. This copies the local
# modules into `node_modules` and updates `package.json` files so that the main
# one contains all external dependencies and _no_ local modules mention any
# dependencies at all. This arrangement makes `npm` happy.

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Move `baseDir` up one layer (not done above because the above is boilerplate).
baseDir="$(cd "${baseDir}/.."; /bin/pwd -P)"


#
# Argument parsing
#

# Where to find local module sources.
localModules=''

# Error during argument processing?
argError=0

# Need help?
showHelp=0

while true; do
    case $1 in
        -h|--help)
            showHelp=1
            break
            ;;
        --local-modules=?*)
            localModules="${1#*=}"
            ;;
        --) # End of all options
            shift
            break
            ;;
        -?*)
            echo "Unknown option: $1" 1>&2
            argError=1
            break
            ;;
        *)  # Default case: No more options, break out of the loop.
            break
    esac

    shift
done

if (( $# != 1 )); then
    argError=1
else
    projectDir="$1"
fi

if [[ ${localModules} == '' ]]; then
    echo 'Need to specify `--local-modules`.' 1>&2
    argError=1
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} --local-modules=<path> <dir/of/subproject>"
    echo '  Copies local dependencies and adjusts `package.json`.'
    echo ''
    echo '  --local-modules=<dir>'
    echo '    Find local module sources in directory <dir>. This must be'
    echo '    specified (not actually an optional option).'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit ${argError}
fi

#
# Helper functions.
#

# Calls `rsync` so as to do an all-local (not actually remote) "archive" copy
# (preserving permissions, modtimes, etc.).
#
# **Note:** We use `rsync` and not `cp` (even though this is a totally local
# operation) because it has well-defined behavior when copying a tree on top of
# another tree and also knows how to create directories as needed.
#
# **Note:** Trailing slashes on source directory names are significant to
# `rsync`. This is salient at some of the use sites.
function rsync-archive {
    # **Note:** We turn off file-sameness checking, which is irrelevant for this
    # use and is furthermore counterproductive, in that it can cause a failure
    # to copy when two non-identical files happen to match in both size and
    # timestamp. (This has happened in practice. When running a build on a
    # freshly checked-out source tree, many many files have the same timestamps,
    # so only the file sizes come into play, and it's very easy to have a file
    # size coincidence.)
    rsync --archive --ignore-times "$@"
}

# Given a full path to a directory under `${localModules}`, prints out just the
# relative portion under that directory. That is, it goes from a full path to
# a simple but possibly scoped module name.
function path-to-module-name {
    local path="$1"

    [[ ${path} =~ ${localModules}/+(.*)$ ]] || return 1
    echo "${BASH_REMATCH[1]}"
}

# Given a `node_modules` directory and a module name, links any `bin` entries in
# the `package.json` of the module into the `node_modules/.bin` directory.
function link-module-bin {
    local nodeModulesDir="$1"
    local moduleName="$2"
    local packageJson="${nodeModulesDir}/${moduleName}/package.json"
    local nodeModulesBinDir="${nodeModulesDir}/.bin"
    local binPath
    local targetPath

    jq -r '(.bin // {}) | to_entries | .[] | "\(.key) \(.value)"' "${packageJson}" | \
    while read -r binPath targetPath; do
        binPath="${nodeModulesBinDir}/${binPath}"

        if [[ ! (${targetPath} =~ ^/) ]]; then
            # It's a relative path.
            targetPath="../${moduleName}/${targetPath}"
        fi

        # Clean up superfluous `.` path elements.
        targetPath="$(echo "${targetPath}" | sed -e 's#\(/\.\)*/#/#g')"

        (
            rm -f "${targetPath}" \
            && mkdir -p "${nodeModulesBinDir}" \
            && rm -f "${binPath}" \
            && ln -s "${targetPath}" "${binPath}"
        ) || return 1
    done
}

#
# Main script
#

# Collect all of the modules referenced by this package, transitively including
# all referenced local modules. The result is two lists, one of local modules
# and one of regular (published via npm) dependencies. This uses a work queue
# arrangement where we start with the main subproject as the sole element of the
# to-be-processed queue.

unprocessed=("${projectDir}")
localDeps=()
regularDeps=()
while (( ${#unprocessed[@]} != 0 )); do
    oneDep="${unprocessed[0]}"
    unprocessed=("${unprocessed[@]:1}") # Delete first element.

    already=0
    for f in "${localDeps[@]}"; do
        if [[ ${f} == ${oneDep} ]]; then
            already=1
            break
        fi
    done

    if (( ${already} )); then
        # We already processed this one.
        continue
    fi

    localDeps+=("${oneDep}")
    oneDep="${oneDep}/package.json"

    if [[ ! -r "${oneDep}" ]]; then
        echo "Not readable: ${oneDep}" 1>&2
        exit 1
    fi

    # Extract local dependencies.
    unprocessed+=($(
        jq --raw-output --arg localModules "${localModules}/" '
              (.dependencies // {})
            | to_entries
            | .[]
            | select(.value == "local")
            | $localModules + .key' \
            "${oneDep}"
    ))

    # Extract regular dependencies.
    regularDeps+=($(
        jq --raw-output '
              (.dependencies // {})
            | to_entries
            | .[]
            | select(.value != "local")
            | .key + "@" + .value' \
            "${oneDep}"
    ))
done

# Remove the first "local dep" because that's the original input file.
localDeps=("${localDeps[@]:1}")

# Verify that there aren't two (or more) different versions listed for any
# single regular dependency. We do this by constructing and evaluating a `jq`
# program that emits a complaint when there's trouble.

problem="$(
    (
        echo '{}'

        for d in "${regularDeps[@]}"; do
            [[ ${d} =~ ^(.*)@([^@]*)$ ]]
            name="${BASH_REMATCH[1]}"
            spec="${BASH_REMATCH[2]}"
            nameq='"'"${name}"'"'
            specq='"'"${spec}"'"'

            echo "| if (.dependencies.${nameq} // ${specq}) == ${specq}"
            echo "then .dependencies.${nameq} = ${specq}"
            echo 'else .error = (.error // "") + "Differing versions of " +' "${nameq}" '+ ".\n"'
            echo "end"
        done

        echo '| if (.error) then .error else "" end'
    ) | jq -f /dev/stdin --null-input --raw-output
)"

if [[ ${problem} != '' ]]; then
    echo "${problem}" 1>&2
    exit 1
fi

# Construct and evaluate a `jq` program to perform all the edits. This removes
# all local dependencies and adds in all the regular dependencies. The fixed
# file replaces the original `package.json` and is also left at
# `package-fixed.json`. The original is left at `package-unfixed.json`.

origFile="${projectDir}/package.json"
unfixedFile="${projectDir}/package-unfixed.json"
fixedFile="${projectDir}/package-fixed.json"
oldFixedFile="${projectDir}/package-fixed-old.json"

if [[ -r ${fixedFile} ]]; then
    rsync-archive "${fixedFile}" "${oldFixedFile}" || exit 1
fi

rsync-archive "${origFile}" "${unfixedFile}" || exit 1

(
    echo '.dependencies = {}'
    for d in "${regularDeps[@]}"; do
        [[ ${d} =~ ^(.*)@([^@]*)$ ]]
        name="${BASH_REMATCH[1]}"
        spec="${BASH_REMATCH[2]}"
        nameq='"'"${name}"'"'
        specq='"'"${spec}"'"'

        echo "| .dependencies.${nameq} = ${specq}"
    done

    # We capture the local dependencies just as a diagnostic aid (e.g., to help
    # debug build problems). As of this writing, they aren't used for any other
    # purpose.
    echo '| .bayouLocalDependencies = []'
    for d in $(printf '%s\n' "${localDeps[@]}" | sort); do
        name="$(path-to-module-name "${d}")"
        nameq='"'"${name}"'"'
        echo "| .bayouLocalDependencies += [${nameq}]"
    done
) | jq -f /dev/stdin "${origFile}" > "${fixedFile}" \
|| exit 1

# Copy the fixed `package.json` file over the original. If the fixed
# `package.json` isn't changed from the previous version (from a previous run of
# this script, that is), restore the previous timestamp (so timestamp-based
# change detection will work).

if [[ -r "${oldFixedFile}" ]] && cmp --quiet "${fixedFile}" "${oldFixedFile}"; then
    # Fixed file is unchanged.
    rsync-archive "${oldFixedFile}" "${fixedFile}"
    rm "${oldFixedFile}"
fi

rsync-archive "${fixedFile}" "${origFile}"

# Copy all of the local modules into the `node_modules` directory.

nodeModules="${projectDir}/node_modules"

mkdir -p "${nodeModules}" || exit 1

for d in "${localDeps[@]}"; do
    name="$(path-to-module-name "${d}")"
    toDir="${nodeModules}/${name}"

    mkdir -p "${toDir}" || exit 1
    rsync-archive --delete "${d}/" "${toDir}" || exit 1

    # Remove the `dependencies` from the `package.json`, because otherwise `npm`
    # tries to process them (and they aren't valid as far as it's concerned).
    # Also, add a binding to make it unambiguous that this is a local module.
    jq '
          del(.dependencies)
        | .localModule = true' \
        "${d}/package.json" > "${toDir}/package.json" \
    || exit 1

    # Link up the `bin` entries, if any. **Note:** This can only be done once
    # the rest of the module is copied and definitely needs to happen after the
    # module's `package.json` is set up.
    link-module-bin "${nodeModules}" "${name}" || exit 1
done
