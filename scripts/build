#!/bin/bash
#
# Copyright 2016-2019 the Bayou Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>
#
# Builds the product. See `--help` for details.
#

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Pull in the build system helper library.
. "${progDir}/lib/include-build.sh"


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# List of subprojects to build.
buildProjects=()

# Directory in which to find additional local modules, if any.
extraModulesDir=''

# Name of the `main` module for the client, if specified.
mainClient=''

# Name of the `main` module for the server, if specified.
mainServer=''

# Path to the product info file, if specified.
productInfoPath=''

# Options to pass to `set-up-out`.
outOpts=()

while true; do
    case $1 in
        -h|--help)
            showHelp=1
            break
            ;;
        --clean)
            outOpts+=("$1")
            ;;
        --compiler)
            buildProjects+=(compiler)
            ;;
        --copy-sources)
            buildProjects+=(copy-sources)
            ;;
        --extra-modules=?*)
            extraModulesDir="${1#*=}"
            ;;
        --linter)
            buildProjects+=(linter)
            ;;
        --out=?*)
            outOpts+=("$1")
            ;;
        --main-client=?*)
            mainClient="${1#*=}"
            ;;
        --main-server=?*)
            mainServer="${1#*=}"
            ;;
        --product-info=?*)
            productInfoPath="${1#*=}"
            ;;
        --) # End of all options
            shift
            break
            ;;
        -?*)
            echo "Unknown option: $1" 1>&2
            argError=1
            break
            ;;
        *)  # Default case: No more options, break out of the loop.
            break
    esac

    shift
done

if (( ${#buildProjects[@]} == 0 )); then
    # Default set of things to build when no explicit targets are specified.
    buildProjects=(compiler server client bin product-info)
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Build the project. If no target options are specified (e.g. `--linter`)'
    echo '  this performs a full build.'
    echo ''
    echo 'Target options:'
    echo '  --compiler'
    echo '    Build the compiler (transpiler).'
    echo '  --copy-sources'
    echo '    Just copy source files into the output directory. This is implied by'
    echo '    by the other target options, but sometimes you might want to just do'
    echo '    this by itself.'
    echo '  --linter'
    echo '    Build the linter.'
    echo ''
    echo 'Other options:'
    echo '  --clean'
    echo '    Start from a clean build.'
    echo '  --extra-modules=<dir>'
    echo '    Find additional local module sources in directory <dir>.'
    echo '  --out=<dir>'
    echo '    Place output in directory <dir>.'
    echo '  --main-client=<name>'
    echo '    Name of the main module for the client.'
    echo '  --main-server=<name>'
    echo '    Name of the main module for the server.'
    echo '  --product-info=<path>'
    echo '    Filesystem path to the product info file.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit ${argError}
fi


#
# Helper functions
#

# The name for source mapping files.
sourceMapName='source-map.txt'

# List of all mapping files.
mappingFiles=()

# Adds a source directory mapping for a module. The first argument is the
# absolute path to the source and the second argument is the module name.
function add-module-mapping {
    local sourceDir="$1"
    local moduleName="$2"
    local targetDir="${modulesDir}/${moduleName}"
    local dirInfoFile="${targetDir}/${sourceMapName}"

    mappingFiles+=("${dirInfoFile}")

    if [[ -r ${dirInfoFile} ]]; then
        # The directory has been created before (probably in an earlier run of
        # this script). Verify the constraint that a module is only in the base
        # project or extra modules directory but not both.
        local already="$(cat "${dirInfoFile}")"
        if [[ ${already} != ${sourceDir} ]]; then
            echo "Multiple sources for module: ${moduleName}" 1>&2
            return 1
        fi
        return
    fi

    mkdir -p "${targetDir}"
    echo "${sourceDir}" > "${dirInfoFile}"
}

# Adds a directory mapping for the source of each local module, including those
# defined by the base project as well as in the extra modules directory (if
# any).
function add-package-directory-mappings {
    local basePath="${baseDir}/local-modules"
    local d

    for d in $(find-package-directories "${basePath}"); do
        add-module-mapping "${basePath}/${d}" "${d}" || return 1
    done

    if [[ ${extraModulesDir} != '' ]]; then
        for d in $(find-package-directories "${extraModulesDir}"); do
            add-module-mapping "${extraModulesDir}/${d}" "${d}" || return 1
        done
    fi
}

# Copies the server and client source directories into `out`, including the
# contents of the extra modules directory (if any).
function copy-sources {
    echo 'Copying sources...'

    # For each mapping file, copy all of the specified source files, but don't
    # include directories that themselves have separately-specified maps; those
    # get handled in their own iterations of this loop.
    local mapFile
    for mapFile in "${mappingFiles[@]}"; do
        local dir="$(dirname "${mapFile}")"

        local excludes=($(
            # Exclude the source map files themselves.
            echo "--exclude=${sourceMapName}"

            # Exclude subdirectories that have maps.
            cd "${dir}"
            find . -mindepth 2 \
                -name "${sourceMapName}" \
                -exec dirname '{}' ';' \
                | awk '{ printf("--exclude=/%s\n", substr($1, 3)); }'
        ))

        local source="$(cat "${mapFile}")"
        rsync-archive --delete "${excludes[@]}" "${source}/" "${dir}"
    done

    echo 'Copying sources... done.'
}

# Does an `npm install` of the named top-level subproject, for a single given
# module dependency. For example, given `florp @zorch/blort`, this will install
# the module `@zorch/blort` into the directory `florp` under the `out`
# directory. If the second argument is omitted, this uses the usual "main"
# module name for the subproject, e.g. for `florp` it will install
# `@bayou/main-florp` by default.
#
# After installation, this applies local patches to installed external modules.
function do-install {
    local subprojectName="$1"
    local moduleName="$2"
    local toDir="${outDir}/${subprojectName}"
    local npmDir="${toDir}/from-npm"
    local packageJson="${toDir}/package.json"
    local npmPackageJson="${toDir}/package-npm.json"
    local npmBinDir="${npmDir}/node_modules/.bin"

    if [[ ${moduleName} == '' ]]; then
        moduleName="@bayou/main-${subprojectName}"
    fi

    mkdir -p "${toDir}"

    # Write a fresh top-level `package.json` every time. This will get
    # immediately modified by `copy-local-dependencies`. The procedure is a
    # relic from when top-level package files were actual source files and
    # would change from time to time. **TODO:** Fix this janky bit of cruft.
    (
        echo '{'
        echo "    \"name\": \"@bayou/top-package-for-${subprojectName}\","
        echo "    \"dependencies\": { \"${moduleName}\": \"local\" },"
        echo "    \"mainModule\": \"${moduleName}\","

        # These are irrelevant and are included just to prevent
        # `npm install` from complaining.
        echo "    \"version\": \"1.0.0\","
        echo "    \"author\": \"The authors\","
        echo "    \"repository\": \"none\","
        echo "    \"description\": \"See contents.\","
        echo "    \"license\": \"UNLICENSED\""
        echo '}'
    ) > "${packageJson}"

    # Integrates local module dependencies into this package. It copies the
    # required local modules and also rewrites the top-level `package.json` so
    # that it lists the transitive closure of external module dependencies.
    echo "${subprojectName}:" 'Copying local-module dependencies...'
    "${progDir}/lib/copy-local-dependencies" \
        --local-modules="${modulesDir}" "${toDir}" \
    || return 1

    if [[ -r ${npmPackageJson} ]] \
           && cmp --quiet "${npmPackageJson}" "${packageJson}"; then
        # The `package.json` hasn't changed since we `npm install`ed, so we can
        # skip the rest of this function.
        echo "${subprojectName}:" \
            'No change to external dependencies. Skipping `npm install`.'
        return
    fi

    echo "${subprojectName}:" 'Installing external dependencies...'

    # This runs `npm install` in a new empty directory, because as of npm v5,
    # npm _really really_ wants to manage all modules under `node_modules`, and
    # in our case we have local modules which npm doesn't know about and
    # therefore wants to remove whenever we do `npm install`. **TODO:** Simplify
    # this back to just doing `npm install` in the main directory, should npm
    # ever gain a way to understand that there are some module directories that
    # it shouldn't touch. See <https://github.com/npm/npm/issues/18062>.

    rm -rf "${npmDir}"
    mkdir -p "${npmDir}"
    rsync-archive "${packageJson}" "${npmDir}/package.json"

    (cd "${npmDir}" && npm install --no-package-lock) || return 1

    # Move each of the directories that `npm` got for us into the subproject's
    # `node_modules`.
    #
    # **Note:** We don't just `mv` (or `rsync --delete`) the whole
    # `node_modules` directory, because we want to keep our local modules.

    echo "${subprojectName}:" 'Moving external dependencies into place...'

    local d
    for d in $(cd "${npmDir}/node_modules"; /bin/ls -A); do
        if [[ ${d} == '.bin' ]]; then
            # `.bin` is handled specially. See below.
            continue
        fi

        (
            fromDir="${npmDir}/node_modules/${d}"
            toDir="${toDir}/node_modules/${d}"
            rm -rf "${toDir}" && mv "${fromDir}" "${toDir}"
        ) || return 1
    done

    if [[ -d "${npmBinDir}" ]]; then
        # Merge `.bin` directory contents into the pre-existing one (if any).
        mkdir -p "${toDir}/node_modules/.bin"
        rsync-archive "${npmBinDir}/" "${toDir}/node_modules/.bin"
    fi

    rm -rf "${npmDir}" || return 1

    # Copy the `package.json` that we installed with, so we can compare it on
    # subsequent builds.
    rsync-archive "${packageJson}" "${npmPackageJson}" || return 1

    echo "${subprojectName}:" 'External dependencies... done.'
}

# Builds the server code. This builds from `server` into `final/server`. The
# JS files in the former are treated as modern ECMAScript, which are processed
# by Babel.
function build-server {
    local fromDir="${outDir}/server"
    local toDir="${finalDir}/server"

    # Find the script to invoke the Babel compiler (provided by the `compiler`
    # subproject).
    local compile="$(find "${outDir}/compiler" -name 'bayou-compile')"
    if [[ ${compile} == '' ]]; then
        echo 'Could not find compiler script.' 1>&2
        return 1
    fi

    # Do the initial npm(ish) installation.
    do-install server "${mainServer}" || return 1

    # Run Babel on all of the local source files, storing them next to the
    # imported and patched modules.

    # Start with the main `server` directory.
    local srcDirs=("${fromDir}")

    # Add each of the local modules that it uses.
    local name
    for name in $(local-module-names); do
        if [[ -d "${fromDir}/node_modules/${name}" ]]; then
            srcDirs+=("${fromDir}/node_modules/${name}")
        fi
    done

    "${compile}" "--in-dir=${fromDir}" "--out-dir=${toDir}" --server \
        "${srcDirs[@]}" \
    || return 1

    # Copy everything else over to the final `server` directory as-is. We use
    # the `--update` option to avoid clobbering those Babel-compiled files we
    # just went through all the trouble to make.
    echo 'server: Copying final code...'
    rsync-archive --delete --update "${fromDir}/" "${toDir}" \
        || return 1
    echo 'server: Copying final code... done.'
}

# Builds the client code.
function build-client {
    local toDir="${finalDir}/client"

    mkdir -p "${toDir}" || return 1
    do-install client "${mainClient}" || return 1

    # Copy the built result into the final output.
    echo 'client: Copying final code...'
    rsync-archive --delete "${outDir}/client/" "${toDir}" \
        || return 1
    echo 'client: Copying final code... done'
}

# Builds the compiler (transpiler) code.
function build-compiler {
    do-install compiler || return 1
}

# "Builds" the `copy-sources` target.
function build-copy-sources {
    # This is a no-op because sources always get copied for all build targets,
    # before calling through to the `build-*` functions.
    :
}

# Builds the code linter.
function build-linter {
    do-install linter || return 1
}

# "Builds" the `bin` directory.
function build-bin {
    local toDir="${finalDir}/bin"

    mkdir -p "${toDir}" || return 1

    rsync-archive --delete --exclude='README.md' \
        "${baseDir}/etc/bin-src/" "${toDir}" \
        || return 1

    chmod a+x "${toDir}"/*
}

# Builds the product info file.
function build-product-info {
    local fileName='product-info.txt'
    local outFile="${finalDir}/${fileName}"
    local inFile="${productInfoPath}"

    if [[ ${inFile} == '' ]]; then
        inFile="${baseDir}/${fileName}"
    fi

    # The git info, if available.
    local commitInfo="$(
        git log -1 --pretty=format:"commit_id = '%H'%ncommit_date = '%ai'" \
            2>/dev/null \
        || (
            echo 'commit_id = unknown'
            echo 'commit_date = unknown'
        )
    )"

    # The current date/time. This is the same format as is produced by the
    # `git log` command, above.
    local buildDate="build_date = '$(date '+%Y-%m-%d %H:%M:%S %z')'"

    # The build number, if available.
    local buildNumber="${BUILD_NUMBER}"
    if [[ ${buildNumber} == '' ]]; then
        buildNumber='unknown'
    fi
    buildNumber="build_number = ${buildNumber}"

    # The version of Node that was used for the build. This is important because
    # the version of Node used to _run_ the product needs to be the same major
    # version. (Most specifically, the native module API needs to be compatible,
    # but having a matching major version is a reasonably conservative expansion
    # from there.)
    local nodeVersion="node_version = $(node --version | sed -e 's/^v//g')"

    mkdir -p "$(dirname "${outFile}")"

    # Combine the static info file from the source with the additional info
    # derived here, to produce the final output.
    (
        cat "${inFile}"
        echo ''
        echo '# The following lines were added automatically by the build script.'
        echo "${commitInfo}"
        echo "${buildDate}"
        echo "${buildNumber}"
        echo "${nodeVersion}"
    ) > "${outFile}"
}

# Cleanup function to remove the build PID file upon process termination.
function rm-build-pid {
    local buildPidFile="${outDir}/build-pid.txt"

    trap - SIGTERM # Avoid recursion.
    rm -f "${buildPidFile}"

    exit
}

# Checks to see if another build is running in the output directory, waiting for
# a bit if it looks like there's something running, and ultimately erroring out
# if whatever is running never stops. Once no other build is running, this will
# plop a file in the build directory to indicate that this process is the one
# in charge. If _this_ process is already set to be the one owning the build
# (possible and expected during the second call to this function), then this
# function returns promptly and successfully without any further action.
function avoid-simultaneous-builds {
    local thisPid="$$"
    local buildPidFile="${outDir}/build-pid.txt"
    local lastPid=''
    local waitSecs=0

    while true; do
        # **Note:** We (re)read the file on every iteration, because it's
        # possible for there to be a race between two different would-be build
        # processes.
        local alreadyPid="$(cat "${buildPidFile}" 2>/dev/null)"
        if [[ ${alreadyPid} == ${thisPid} ]]; then
            # This PID is already running the show.
            return
        elif [[ ${alreadyPid} == '' ]]; then
            break
        fi

        # There's a PID file. Check to see if it's still running.
        if ! ps -p "${alreadyPid}" >/dev/null 2>&1; then
            # Nope. Not actually running!
            break
        fi

        if (( ${waitSecs} == 0 )); then
            echo 'Another build is running in the output directory.'
            echo "  directory: ${outDir}"
            echo "  pid:       ${alreadyPid}"
            echo ''
            echo 'Waiting a moment to see if it finishes...'
        elif (( ${waitSecs} > 75 )); then
            echo 'Other build is *still* running. Giving up!'
            return 1
        elif [[ ${alreadyPid} != ${lastPid} ]]; then
            echo ''
            echo 'A different build started running in the meantime.'
            echo "  pid:       ${alreadyPid}"
            echo ''
        elif (( (${waitSecs} % 20) == 0 )); then
            echo 'Still waiting...'
        fi

        lastPid="${alreadyPid}"

        sleep 5
        ((waitSecs += 5))
    done

    # Write our PID into the file.
    echo "${thisPid}" > "${buildPidFile}"
}


#
# Main script
#

check-build-dependencies || exit 1
set-up-out "${outOpts[@]}" || exit 1

# Make sure only one build is running in any given output directory.
avoid-simultaneous-builds || exit 1
trap rm-build-pid SIGINT SIGTERM EXIT

echo 'Building...'

(
    add-package-directory-mappings \
        && copy-sources
) || exit 1

# Catches races between build runs that managed to start simultanously enough to
# avoid noticing each other during the initial check.
avoid-simultaneous-builds || exit 1

for proj in "${buildProjects[@]}"; do
    "build-${proj}" || exit 1
done

echo 'Done with build!'
