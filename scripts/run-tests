#!/bin/bash
#
# Copyright 2016-2017 the Bayou Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>
#
# Runs all the tests.
#

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Output directory option, if any.
outDirOpt=()

# Which tests to run.
tests=()

while true; do
    case $1 in
        -h|--help)
            showHelp=1
            break
            ;;
        --client|--client-bundle|--server)
            tests+=("${1#--}") # Strip off the `--` prefix.
            ;;
        --out=?*)
            outDirOpt+=("$1")
            ;;
        --) # End of all options
            shift
            break
            ;;
        -?*)
            echo "Unknown option: $1" 1>&2
            argError=1
            break
            ;;
        *)  # Default case: No more options, break out of the loop.
            break
    esac

    shift
done

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [--out=<dir>] [--client] [--client-bundle] [--server]"
    echo '  Runs the project tests. If no specific tests are specified, runs all'
    echo '  of them.'
    echo ''
    echo '  --client'
    echo '    Run the client unit tests.'
    echo '  --client-bundle'
    echo '    Run the client bundle build test.'
    echo '  --out=<dir>'
    echo '    Directory containing the built output, and where test results are'
    echo '    stored.'
    echo '  --server'
    echo '    Run the server unit tests.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit ${argError}
fi

if (( ${#tests[@]} == 0 )); then
    # Default to running all tests.
    tests=(client-bundle client server)
fi


#
# Helper functions
#

# Runs a test command, either teeing its output or passing `--test-out` to get
# output, and always noting its exit status code.
function run-test {
    local tee=0
    if [[ $1 == '--tee' ]]; then
        tee=1
        shift
    fi

    local outPath="${testOutDir}/$1"
    shift

    local -a cmd=("$@")
    local status=0

    echo ''
    echo "Running: ${cmd[@]}"

    if (( $tee )); then
        # This isn't just a simple matter of `cmd ... | tee ...`, because we
        # want to get the status code from the left-hand side of the would-be
        # pipeline. Instead, we use a "process substitution" (`>(...)`), which
        # has mostly the same effect as a pipe except without masking the main
        # command's status code.
        "${cmd[@]}" > >(tee "${outPath}") 2>&1
        status="$?"

        # Sleep a moment to let `tee` finish writing output.
        sleep 1
    else
        "${cmd[@]}" --test-out="${outPath}"
        status="$?"
    fi

    (
        echo ''
        echo "Exit status: ${status}"
    ) >> "${outPath}"

    if (( ${status} != 0 )); then
        $((testErrors++))
    fi
}


#
# Main script
#

# How many test runs reported failure.
testErrors=0

outDir="$(${progDir}/lib/out-dir-setup "${outDirOpt[@]}")"
if (( $? != 0 )); then
    return 1
fi

# How to run the product.
runProduct="${outDir}/final/bin/run"

# Directory for test output.
testOutDir="${outDir}/test-results"

if [[ ! -e ${runProduct} ]]; then
    echo 'Could not find `run` script. Did you forget to build?' 1>&2
    exit 1
fi

mkdir -p "${testOutDir}"

for test in "${tests[@]}"; do
    case "${test}" in
        client)
            run-test 'client-test.txt' "${runProduct}" --client-test
            ;;
        client-bundle)
            run-test --tee 'client-bundle.txt' "${runProduct}" --client-bundle
            ;;
        server)
            run-test 'server-test.txt' "${runProduct}" --server-test
            ;;
    esac
done

# Emit a summary message if more than one (set of) test(s) was run.
if (( ${#tests[@]} > 1 )); then
    echo ''
    echo "${#tests[@]} test runs."

    if (( ${testErrors} != 0 )); then
        echo "${testErrors} reported at least one failure."
        echo 'Alas.'
    else
        echo 'All passed. Yay!'
    fi
fi

if (( ${testErrors} != 0 )); then
    exit 1
fi
