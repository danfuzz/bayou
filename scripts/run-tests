#!/bin/bash
#
# Copyright 2016-2017 the Bayou Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>
#
# Runs all the tests.
#

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Output directory option, if any.
outDirOpt=()

while (( $# != 0 )); do
    opt="$1"
    if [[ ${opt} == '--' ]]; then
        shift
        break
    elif [[ ${opt} == '--create' ]]; then
        create=1
    elif [[    ${opt} == '--help'
            || ${opt} == '-h' ]]; then
        showHelp=1
    elif [[ ${opt} =~ ^--out= ]]; then
        outDirOpt="${opt}"
    elif [[ ${opt} =~ ^- ]]; then
        echo "Unknown option: ${opt}" 1>&2
        argError=1
        break
    else
        break
    fi
    shift
done
unset opt

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [--out=<dir>]"
    echo '  Runs the project tests.'
    echo ''
    echo '  --out=<dir>'
    echo '    Directory containing the built output, and where test results are'
    echo '    stored.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit ${argError}
fi


#
# Helper functions
#

# Runs a test command, teeing its output and noting its status code.
function run-test {
    local outFile="${testOutDir}/$1"
    shift
    local -a cmd=("$@")

    echo ''
    echo "Running: ${cmd[@]}"

    # This isn't just a simple matter of `cmd ... | tee ...`, because we want to
    # get the status code from the left-hand side of the would-be pipeline.
    # Instead, we use a "process substitution" (`>(...)`), which has mostly the
    # same effect as a pipe except without masking the main command's status
    # code.
    "${cmd[@]}" --client-bundle > >(tee "${outFile}") 2>&1
    local status="$?"

    # Sleep a moment to let `tee` finish writing output.
    sleep 1

    (
        echo ''
        echo "Exit status: ${status}"
    ) >> "${outFile}"

    if (( ${status} != 0 )); then
        testError=1
    fi
}


#
# Main script
#

# Whether any test got an error.
testError=0

outDir="$(${progDir}/lib/out-dir-setup "${outDirOpt[@]}")"
if (( $? != 0 )); then
    return 1
fi

# How to run the product.
runProduct="${outDir}/final/bin/run"

# Directory for test output.
testOutDir="${outDir}/test-results"

if [[ ! -e ${runProduct} ]]; then
    echo 'Could not find `run` script. Did you forget to build?' 1>&2
    exit 1
fi

mkdir -p "${testOutDir}"

run-test "client-bundle.txt" "${runProduct}" --client-bundle
run-test "server-test.txt" "${runProduct}" --server-test

exit "${testError}"
