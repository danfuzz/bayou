#!/bin/bash
#
# Copyright 2016-2019 the Bayou Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>
#

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog


#
# Argument parsing
#

# Error during argument processing?
argError=0

# URL to contact.
serverUrl='http://localhost:8080/api'

# Need help?
showHelp=0

while true; do
    case $1 in
        -h|--help)
            showHelp=1
            break
            ;;
        --) # End of all options.
            shift
            break
            ;;
        -?*)
            echo "Unknown option: $1" 1>&2
            argError=1
            break
            ;;
        *)  # Default case: No more options, break out of the loop.
            break
    esac

    shift
done

if (( $# != 1 )); then
    echo 'Missing <class-name> or too many arguments.' 1>&2
    argError=1
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...] <class-name>"
    echo '  Convert a class `.js` file from using `export default` to just plain'
    echo '  `export`.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit ${argError}
fi

className="$1"

#
# Helper functions
#

function fix-file {
    local inFile="$1"
    outFile="$1-new"

    awk -v "className=${className}" '
    /^export default class / && ($4 == className) {
        line = $0;
        sub(/default /, "", line);
        print line;
        next;
    }

    /^import [A-Za-z]* from '"'"'[.@]/ && ($2 == className) {
        $2 = "{ " $2 " }";
        print;
        next;
    }

    /require/ && (index($0, className) != 0) {
        print "EEEEK REQUIRE", $0;
        next;
    }

    { print; }
    ' < "${inFile}" > "${outFile}"

    mv "${outFile}" "${inFile}"
}

#
# Main script
#

echo 'Finding files...'

files=($(
    grep --recursive --files-with-matches --exclude-dir='out' --include='*.js' \
        '\b'"${className}"'\b' .
))

for f in "${files[@]}"; do
    echo "Processing ${f}..."
    fix-file "${f}"
done
