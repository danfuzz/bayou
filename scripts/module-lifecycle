#!/bin/bash
#
# Loops over all of the npm modules in a given directory
# and executes the indicated lifecycle scripts associated
# with them.
#

# Set `progName` to the program name.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
}
init-prog

#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Directory in which to look for modules
modulePath=''

# Lifecycle event to fire
lifecycleEvent=''

while true; do
    case $1 in
        -h|--help)
            showHelp=1
            break
            ;;
        --event=?*)
            lifecycleEvent=${1#*=}

            if [[ ! "${lifecycleEvent}" =~ ^(preinstall|build|install|postinstall|uninstall)$ ]]; then
                echo "Unknown event: ${lifecycleEvent}" 1>&2
                echo 1>&2

                argError=1
                break
            fi
            ;;
        --event=|--event)
            echo '--event requires a non-empty argument.'
            argError=1
            break
            ;;
        --path=?*)
            modulePath=${1#*=}
            ;;
        --path=|--path)
            echo '--path requires a non-empty argument.'
            argError=1
            break
            ;;
        --) # End of all options
            shift
            break
            ;;
        -?*)
            echo "Unknown option: $1" 1>&2
            argError=1
            ;;
        *)  # Default case: No more options, break out of the loop.
            break;
    esac

    shift
done

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} --path=<path> --event=<event>"
    echo '  Run the event for the modules in the given path.'
    echo ''
    echo '  --path'
    echo '    The directory path in which to look for modules.'
    echo '  --event'
    echo '    The module lifecycle event to trigger. Must be one of'
    echo '      [ preinstall | build | install | postinstall | uninstall ]'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit ${argError}
fi

# Iterates over the modules at a given path and executes
# the named lifecycle script if one is found.
function run-event-at-path {
  local event="$1"
  local path="$2"

  # Ensure the modules directory exists.
  if [[ ! -d "${path}" ]]; then
    echo "Path ${path} does not exist." 1>&2
    exit 1
  fi

  # For each subdirectory at the supplied path...
  for subdir in $(find "${path}" -type d -mindepth 1 -maxdepth 1); do
    local packagePath="${subdir}/package.json"

    # See if it has a package.json file, skip directory if it doesn't.
    if [[ ! -r "${packagePath}" ]]; then
      continue
    fi

    local script=''

    # See if package.json defines a script for the given event...
    script="$(jq -e -r ".scripts.${event}" "${packagePath}")"

    # Skip it if it doesn't.
    if (( $? > 0 )); then
      continue
    fi

    # Finally, execute the lifecycle script.
    (cd "${subdir}"; sh -c "${script}") || return 1
  done
}

run-event-at-path "${lifecycleEvent}" "${modulePath}"
