#!/bin/bash
#
# Copyright 2016-2019 the Bayou Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>
#
# Starts the product, building it first if sitting in a clean directory. See
# `--help` for more info.
#

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
    [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog


#
# Helper functions
#

# Emits an error both as a JSON blob to stdout (in the same format as is used
# in the main product, so it has a chance to get ingested by any logging
# infrastructure which happens to be running) and as a human-oriented simple
# printout to stderr.
function report-error {
    local text="$*"

    echo "${text}" 1>&2

    cat <<EOF
{
    "timeMsec": $(date '+%s000'),
    "tag": ["outer-run"],
    "message": "${text}"
}
EOF
}

# Helper for `check-environment-dependencies` which validates one dependency.
function check-dependency {
    local name="$1"
    local versionCmd="$2"
    local match="$3"

    # Extract just the command name, and verify that it exists at all.

    local cmdName=''
    if [[ ${versionCmd} =~ ^([^ ]+) ]]; then
        cmdName="${BASH_REMATCH[1]}"
    else
        # **Note:* This indicates a bug in this script, not a problem with the
        # environment.
        report-error "Could not determine commmand name for ${name}."
        exit 1
    fi

    if ! which "${cmdName}" >/dev/null 2>&1; then
        report-error "Missing required command for ${name}: ${cmdName}"
        exit 1
    fi

    local version="$(${versionCmd} 2>&1)"
    if ! grep -q -e "${match}" <<< "${version}"; then
        report-error "Unsupported version of ${name}: ${version}"
        exit 1
    fi
}

# Checks the versions of our various expected-installed dependencies.
function check-environment-dependencies {
    check-dependency 'Node' 'node --version' '^v1[01]\.'
}

# Matches the version of Node against the one used to build the product. This
# augments (does not replace) the Node check in
# `check-environment-dependencies` (above).
function check-node-versions {
    local infoLine="$(cat "${baseDir}/product-info.txt" | grep '^node_version')"
    local buildVersion runVersion

    if [[ ${infoLine} =~ =' '*([0-9]+) ]]; then
        buildVersion="${BASH_REMATCH[1]}"
    else
        report-error "Missing node_version metadata in the product info file."
        exit 1
    fi

    if [[ $(node --version) =~ ^v([0-9]+) ]]; then
        runVersion="${BASH_REMATCH[1]}"
    else
        report-error "Could not determine installed Node version."
        exit 1
    fi

    if [[ ${buildVersion} != ${runVersion} ]]; then
        report-error "Mismatched Node major versions: Built with v${buildVersion}; running with v${runVersion}."
        exit 1
    fi
}

#
# Main script
#

check-environment-dependencies
check-node-versions

cd "${baseDir}/server"
exec node --max-old-space-size=3072 node_modules/.bin/bayou-server --prog-name="${progName}" "$@"
